# source: http://localhost:4466
# timestamp: Fri Nov 08 2019 15:44:46 GMT+0000 (Western European Standard Time)

type AggregatePayment {
  count: Int!
}

type AggregateSubScription {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPayment(data: PaymentCreateInput!): Payment!
  createSubScription(data: SubScriptionCreateInput!): SubScription!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment
  updateSubScription(data: SubScriptionUpdateInput!, where: SubScriptionWhereUniqueInput!): SubScription
  deleteUser(where: UserWhereUniqueInput!): User
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deleteSubScription(where: SubScriptionWhereUniqueInput!): SubScription
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPayment(where: PaymentWhereUniqueInput!, create: PaymentCreateInput!, update: PaymentUpdateInput!): Payment!
  upsertSubScription(where: SubScriptionWhereUniqueInput!, create: SubScriptionCreateInput!, update: SubScriptionUpdateInput!): SubScription!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyPayments(data: PaymentUpdateManyMutationInput!, where: PaymentWhereInput): BatchPayload!
  updateManySubScriptions(data: SubScriptionUpdateManyMutationInput!, where: SubScriptionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPayments(where: PaymentWhereInput): BatchPayload!
  deleteManySubScriptions(where: SubScriptionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Payment implements Node {
  id: ID!
  customerId: String!
  methods: [String!]!
  user: User!
}

"""A connection to a list of items."""
type PaymentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentEdge]!
  aggregate: AggregatePayment!
}

input PaymentCreateInput {
  id: ID
  customerId: String!
  methods: PaymentCreatemethodsInput
  user: UserCreateOneWithoutPaymentInput!
}

input PaymentCreatemethodsInput {
  set: [String!]
}

input PaymentCreateOneWithoutUserInput {
  create: PaymentCreateWithoutUserInput
  connect: PaymentWhereUniqueInput
}

input PaymentCreateWithoutUserInput {
  id: ID
  customerId: String!
  methods: PaymentCreatemethodsInput
}

"""An edge in a connection."""
type PaymentEdge {
  """The item at the end of the edge."""
  node: Payment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentOrderByInput {
  id_ASC
  id_DESC
  customerId_ASC
  customerId_DESC
}

type PaymentPreviousValues {
  id: ID!
  customerId: String!
  methods: [String!]!
}

type PaymentSubscriptionPayload {
  mutation: MutationType!
  node: Payment
  updatedFields: [String!]
  previousValues: PaymentPreviousValues
}

input PaymentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentWhereInput
}

input PaymentUpdateInput {
  customerId: String
  methods: PaymentUpdatemethodsInput
  user: UserUpdateOneRequiredWithoutPaymentInput
}

input PaymentUpdateManyMutationInput {
  customerId: String
  methods: PaymentUpdatemethodsInput
}

input PaymentUpdatemethodsInput {
  set: [String!]
}

input PaymentUpdateOneWithoutUserInput {
  create: PaymentCreateWithoutUserInput
  connect: PaymentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PaymentUpdateWithoutUserDataInput
  upsert: PaymentUpsertWithoutUserInput
}

input PaymentUpdateWithoutUserDataInput {
  customerId: String
  methods: PaymentUpdatemethodsInput
}

input PaymentUpsertWithoutUserInput {
  update: PaymentUpdateWithoutUserDataInput!
  create: PaymentCreateWithoutUserInput!
}

input PaymentWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  customerId: String

  """All values that are not equal to given value."""
  customerId_not: String

  """All values that are contained in given list."""
  customerId_in: [String!]

  """All values that are not contained in given list."""
  customerId_not_in: [String!]

  """All values less than the given value."""
  customerId_lt: String

  """All values less than or equal the given value."""
  customerId_lte: String

  """All values greater than the given value."""
  customerId_gt: String

  """All values greater than or equal the given value."""
  customerId_gte: String

  """All values containing the given string."""
  customerId_contains: String

  """All values not containing the given string."""
  customerId_not_contains: String

  """All values starting with the given string."""
  customerId_starts_with: String

  """All values not starting with the given string."""
  customerId_not_starts_with: String

  """All values ending with the given string."""
  customerId_ends_with: String

  """All values not ending with the given string."""
  customerId_not_ends_with: String
  user: UserWhereInput
}

input PaymentWhereUniqueInput {
  id: ID
}

enum Permission {
  SUPERADMIN
  ADMIN
  USER
  ARTIST
  PERMISSIONUPDATE
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment]!
  subScriptions(where: SubScriptionWhereInput, orderBy: SubScriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SubScription]!
  user(where: UserWhereUniqueInput!): User
  payment(where: PaymentWhereUniqueInput!): Payment
  subScription(where: SubScriptionWhereUniqueInput!): SubScription
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  paymentsConnection(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentConnection!
  subScriptionsConnection(where: SubScriptionWhereInput, orderBy: SubScriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubScriptionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  payment(where: PaymentSubscriptionWhereInput): PaymentSubscriptionPayload
  subScription(where: SubScriptionSubscriptionWhereInput): SubScriptionSubscriptionPayload
}

type SubScription implements Node {
  id: ID!
  subscriptionId: String!
}

"""A connection to a list of items."""
type SubScriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubScriptionEdge]!
  aggregate: AggregateSubScription!
}

input SubScriptionCreateInput {
  id: ID
  subscriptionId: String!
}

input SubScriptionCreateOneInput {
  create: SubScriptionCreateInput
  connect: SubScriptionWhereUniqueInput
}

"""An edge in a connection."""
type SubScriptionEdge {
  """The item at the end of the edge."""
  node: SubScription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubScriptionOrderByInput {
  id_ASC
  id_DESC
  subscriptionId_ASC
  subscriptionId_DESC
}

type SubScriptionPreviousValues {
  id: ID!
  subscriptionId: String!
}

type SubScriptionSubscriptionPayload {
  mutation: MutationType!
  node: SubScription
  updatedFields: [String!]
  previousValues: SubScriptionPreviousValues
}

input SubScriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubScriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubScriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubScriptionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SubScriptionWhereInput
}

input SubScriptionUpdateDataInput {
  subscriptionId: String
}

input SubScriptionUpdateInput {
  subscriptionId: String
}

input SubScriptionUpdateManyMutationInput {
  subscriptionId: String
}

input SubScriptionUpdateOneInput {
  create: SubScriptionCreateInput
  connect: SubScriptionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SubScriptionUpdateDataInput
  upsert: SubScriptionUpsertNestedInput
}

input SubScriptionUpsertNestedInput {
  update: SubScriptionUpdateDataInput!
  create: SubScriptionCreateInput!
}

input SubScriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubScriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubScriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubScriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  subscriptionId: String

  """All values that are not equal to given value."""
  subscriptionId_not: String

  """All values that are contained in given list."""
  subscriptionId_in: [String!]

  """All values that are not contained in given list."""
  subscriptionId_not_in: [String!]

  """All values less than the given value."""
  subscriptionId_lt: String

  """All values less than or equal the given value."""
  subscriptionId_lte: String

  """All values greater than the given value."""
  subscriptionId_gt: String

  """All values greater than or equal the given value."""
  subscriptionId_gte: String

  """All values containing the given string."""
  subscriptionId_contains: String

  """All values not containing the given string."""
  subscriptionId_not_contains: String

  """All values starting with the given string."""
  subscriptionId_starts_with: String

  """All values not starting with the given string."""
  subscriptionId_not_starts_with: String

  """All values ending with the given string."""
  subscriptionId_ends_with: String

  """All values not ending with the given string."""
  subscriptionId_not_ends_with: String
}

input SubScriptionWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  emailConfirmToken: Float!
  emailConfirmed: Boolean
  payment: Payment
  permissions: [Permission!]!
  subscription: SubScription
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  emailConfirmToken: Float!
  emailConfirmed: Boolean
  permissions: UserCreatepermissionsInput
  payment: PaymentCreateOneWithoutUserInput
  subscription: SubScriptionCreateOneInput
}

input UserCreateOneWithoutPaymentInput {
  create: UserCreateWithoutPaymentInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutPaymentInput {
  id: ID
  email: String!
  password: String!
  emailConfirmToken: Float!
  emailConfirmed: Boolean
  permissions: UserCreatepermissionsInput
  subscription: SubScriptionCreateOneInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  emailConfirmToken_ASC
  emailConfirmToken_DESC
  emailConfirmed_ASC
  emailConfirmed_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  emailConfirmToken: Float!
  emailConfirmed: Boolean
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  emailConfirmToken: Float
  emailConfirmed: Boolean
  permissions: UserUpdatepermissionsInput
  payment: PaymentUpdateOneWithoutUserInput
  subscription: SubScriptionUpdateOneInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  emailConfirmToken: Float
  emailConfirmed: Boolean
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutPaymentInput {
  create: UserCreateWithoutPaymentInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPaymentDataInput
  upsert: UserUpsertWithoutPaymentInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutPaymentDataInput {
  email: String
  password: String
  emailConfirmToken: Float
  emailConfirmed: Boolean
  permissions: UserUpdatepermissionsInput
  subscription: SubScriptionUpdateOneInput
}

input UserUpsertWithoutPaymentInput {
  update: UserUpdateWithoutPaymentDataInput!
  create: UserCreateWithoutPaymentInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  emailConfirmToken: Float

  """All values that are not equal to given value."""
  emailConfirmToken_not: Float

  """All values that are contained in given list."""
  emailConfirmToken_in: [Float!]

  """All values that are not contained in given list."""
  emailConfirmToken_not_in: [Float!]

  """All values less than the given value."""
  emailConfirmToken_lt: Float

  """All values less than or equal the given value."""
  emailConfirmToken_lte: Float

  """All values greater than the given value."""
  emailConfirmToken_gt: Float

  """All values greater than or equal the given value."""
  emailConfirmToken_gte: Float
  emailConfirmed: Boolean

  """All values that are not equal to given value."""
  emailConfirmed_not: Boolean
  payment: PaymentWhereInput
  subscription: SubScriptionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
